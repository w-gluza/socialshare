{"version":3,"sources":["AniversaryMilestone.jsx","App.js","serviceWorker.js","index.js"],"names":["AniversaryMilestone","store","name","descrption","shareableStoreImageUrl","milestones","type","value","og","title","description","imageUrl","content","property","alt","src","App","console","log","useState","milestoneType","setMilestoneType","milestoneValue","setMilestoneValue","handleAniversaryMilestone","handleMealsMilestone","milestoneUrl","className","onClick","FacebookShareButton","url","FacebookIcon","size","round","LinkedinShareButton","LinkedinIcon","TwitterShareButton","TwitterIcon","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3dd1b1da.chunk.js","sourcesContent":["import React from 'react';\n// import { Helmet } from 'react-helmet';\n\nfunction AniversaryMilestone() {\n  let storeId = 1006; // nie wiem gdzie moge znalezc storeId\n  const store = {\n    name: 'Dale Vale',\n    descrption: 'Test Description',\n    shareableStoreImageUrl: './assets/aniversary.jpg',\n    milestones: [\n      {\n        type: 'aniversary',\n        value: 333,\n      },\n      {\n        type: 'mealsSaved',\n        value: 2000,\n      },\n    ],\n  };\n  const og = {\n    title: store.name,\n    description: store.description,\n    imageUrl: store.shareableStoreImageUrl,\n  };\n  return (\n    <>\n      {/* <Helmet> */}\n      <title>{og.title}</title>\n      <meta name='description' content={og.description} />\n      <meta property='og:title' content={og.title} />\n      <meta property='og:description' content={og.description} />\n\n      <meta property='og:image:url' content={og.imageUrl} />\n      <meta property='og:image:width' content={1200} />\n      <meta property='og:image:height' content={630} />\n\n      <meta\n        property='al:ios:url'\n        content={`toogoodtogoapp://store/${storeId}`}\n      />\n      <meta property='al:ios:app_store_id' content='1060683933' />\n      <meta property='al:ios:app_name' content='TGTG' />\n\n      <meta\n        property='al:android:url'\n        content={`toogoodtogoapp://store/${storeId}`}\n      />\n      <meta property='al:android:package' content='com.app.tgtg' />\n      <meta property='al:android:app_name' content='TooGoodToGo' />\n\n      <meta name='twitter:card' content='summary_large_image' />\n      <meta name='twitter:title' content={og.title} />\n      <meta name='twitter:description' content={og.description} />\n      <meta name='twitter:image' content={og.imageUrl} />\n      {/* </Helmet> */}\n      <div>AniversaryMilestone component</div>\n      <img alt='' src='./assets/aniversary.jpg'></img>\n    </>\n  );\n}\n\nexport default AniversaryMilestone;\n","// locale-en\n// must be querry string\n\nimport React, { useState } from 'react';\nimport './App.css';\nimport AniversaryMilestone from './AniversaryMilestone';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\n// import Store from './store';\n\nimport {\n  FacebookShareButton,\n  LinkedinShareButton,\n  TwitterShareButton,\n  TwitterIcon,\n  LinkedinIcon,\n  FacebookIcon,\n} from 'react-share';\n\nfunction App() {\n  let storeId = 1006; // nie wiem gdzie moge znalezc storeId\n  const store = {\n    name: 'Dale Vale',\n    descrption: 'Test Description',\n    shareableStoreImageUrl:\n      'https://raw.githubusercontent.com/w-gluza/socialshare/master/public/assets/aniversary.jpg',\n    milestones: [\n      {\n        type: 'aniversary',\n        value: 333,\n      },\n      {\n        type: 'mealsSaved',\n        value: 2000,\n      },\n    ],\n  };\n  console.log(store);\n\n  const [milestoneType, setMilestoneType] = useState(store.milestones[0].type);\n  const [milestoneValue, setMilestoneValue] = useState(\n    store.milestones[0].value,\n  );\n\n  function handleAniversaryMilestone() {\n    setMilestoneType('aniversary');\n    setMilestoneValue(store.milestones[0].value);\n  }\n  function handleMealsMilestone() {\n    setMilestoneType('mealsSaved');\n    setMilestoneValue(store.milestones[1].value);\n  }\n  const baseUrl = 'http://localhost:3007/';\n  const milestoneUrl = `${baseUrl}?${milestoneType}?${milestoneValue}`;\n  console.log(milestoneUrl);\n  return (\n    <main>\n      <Router>\n        <section className='section__socialshare'>\n          <article className='mealssaved__article'>\n            <section>\n              <img\n                alt='badge meals'\n                src='https://raw.githubusercontent.com/w-gluza/socialshare/master/public/assets/meals-saved-badge-many-bags.png'\n              ></img>\n            </section>\n            <section className='buttons__container'>\n              <button onClick={handleMealsMilestone}>Meals</button>\n              <FacebookShareButton\n                url={milestoneUrl}\n                onClick={handleMealsMilestone}\n              >\n                <FacebookIcon size={32} round={true} />\n              </FacebookShareButton>\n              <LinkedinShareButton\n                url={milestoneUrl}\n                onClick={handleMealsMilestone}\n              >\n                <LinkedinIcon size={32} round={true} />\n              </LinkedinShareButton>\n              <button onClick={handleMealsMilestone}>\n                <TwitterShareButton\n                  url={milestoneUrl}\n                  onClick={handleMealsMilestone}\n                >\n                  <TwitterIcon size={32} round={true} />\n                </TwitterShareButton>\n              </button>\n            </section>\n          </article>\n          <article className='mealssaved__article'>\n            <section>\n              <img\n                alt='badge'\n                src='https://raw.githubusercontent.com/w-gluza/socialshare/master/public/assets/months-on-tgtg-badge-12.png'\n              ></img>\n            </section>\n            <section className='buttons__container'>\n              <button onClick={handleAniversaryMilestone}>aniversary</button>\n              <FacebookShareButton\n                onClick={handleAniversaryMilestone}\n                url={milestoneUrl}\n              >\n                <FacebookIcon size={32} round={true} />\n              </FacebookShareButton>\n              <LinkedinShareButton\n                onClick={handleAniversaryMilestone}\n                url={milestoneUrl}\n              >\n                <LinkedinIcon size={32} round={true} />\n              </LinkedinShareButton>\n              <TwitterShareButton\n                onClick={handleAniversaryMilestone}\n                url={milestoneUrl}\n              >\n                <TwitterIcon size={32} round={true} />\n              </TwitterShareButton>\n            </section>\n          </article>\n        </section>\n        <p> {milestoneUrl}</p>\n        <Route path='/aniversary' component={AniversaryMilestone} />\n      </Router>\n    </main>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}